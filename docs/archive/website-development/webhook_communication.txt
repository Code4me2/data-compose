# Comprehensive Instruction Manual: Multi-Workflow Webhook Trigger Implementation

## Overview
This manual provides detailed instructions for implementing a system that allows a single n8n webhook endpoint to trigger different workflows based on request payload differentiation. The solution enables both chat message processing and batch text file processing through the same endpoint.

---

## Part A: Human Configuration Tasks (n8n Workflow Setup)

### A1. Main Workflow Router Configuration

**HUMAN TASK: Configure Request Differentiation Logic**

1. **Add IF Node After Webhook**
   - Navigate to your existing n8n main workflow
   - Locate the existing Webhook node (POST method)
   - Add an **IF node** immediately after the Webhook node
   - Connect the Webhook output to the IF node input

2. **Configure IF Node Conditions**
   - **Node Name**: "Route Request Type"
   - **Condition Type**: Expression
   - **Expression**: `{{ $json.body.requestType === 'fileDirectoryUpload' }}`
   - **Description**: "Checks if incoming request is for file upload processing"

3. **Branch Configuration**
   - **TRUE Branch**: File upload processing path
   - **FALSE Branch**: Existing chat processing path

### A2. File Processing Branch Setup

**HUMAN TASK: Configure Execute Workflow Node**

1. **Add Execute Workflow Node**
   - Connect the TRUE output of the IF node to a new **Execute Workflow** node
   - **Node Name**: "Process File Directory"

2. **Execute Workflow Configuration**
   - **Workflow**: Select your file processing sub-workflow (to be created in A3)
   - **Source**: "Data from other Nodes"
   - **Wait for Workflow**: Enable (checked)

3. **Data Passing Configuration**
   - **Parameters > Data to Send**:
     - **Name**: `uploadedFiles`
     - **Value**: `{{ $json.body.files }}`
   - This passes the file array from the webhook payload to the sub-workflow

### A3. Sub-Workflow Creation

**HUMAN TASK: Create File Processing Sub-Workflow**

1. **Create New Workflow**
   - Create a new n8n workflow
   - **Name**: "File Directory Processor"
   - **Trigger**: Start node (not webhook trigger)

2. **Configure Input Processing**
   - Add a **Set** node after the Start node
   - **Node Name**: "Extract File Data"
   - **Configuration**:
     - **Keep Only Set Values**: Disable
     - **Values to Set**:
       - **Name**: `files`
       - **Value**: `{{ $json.uploadedFiles }}`

3. **Add File Processing Loop**
   - Add **Loop Over Items** node
   - **Input Items**: `{{ $json.files }}`
   - **Batch Size**: 1 (process one file at a time)

4. **Configure File Content Processing**
   - Inside the loop, add processing nodes as needed:
     - **Function** nodes for text manipulation
     - **Set** nodes for data structuring
     - **HTTP Request** nodes for external API calls
     - Access individual file data using:
       - File name: `{{ $item.json.name }}`
       - File content: `{{ $item.json.content }}`

### A4. Chat Processing Branch

**HUMAN TASK: Preserve Existing Logic**

1. **Connect Existing Nodes**
   - Connect the FALSE output of the IF node to your existing chat processing nodes
   - Ensure all existing chat functionality remains intact
   - No modifications needed to existing chat processing logic

---

## Part B: Coding Agent Implementation Tasks (UI and JavaScript)

### B1. HTML Structure Implementation

**CODING AGENT TASK: Implement File Upload Interface**

```html
<!-- Add these elements to your existing UI -->
<div id="fileUploadSection" class="upload-container">
    <h3>Directory Upload</h3>
    
    <!-- File Input Element -->
    <input 
        type="file" 
        id="fileUploader" 
        multiple 
        accept=".txt"
        style="margin-bottom: 10px;"
    >
    
    <!-- Status Display -->
    <div id="fileStatus" class="status-display">
        No files selected
    </div>
    
    <!-- Confirmation Button -->
    <button 
        id="confirmSubmitButton" 
        disabled
        class="submit-button"
    >
        Process Selected Files
    </button>
    
    <!-- Progress Indicator -->
    <div id="uploadProgress" class="progress-container" style="display: none;">
        <div class="progress-bar">
            <div id="progressFill" class="progress-fill"></div>
        </div>
        <span id="progressText">Processing...</span>
    </div>
</div>
```

**Critical Implementation Notes:**
- The `multiple` attribute enables selection of multiple files
- `accept=".txt"` provides UI filtering but requires JavaScript validation
- Initial button disabled state prevents premature submissions

### B2. Core File Handling Logic

**CODING AGENT TASK: Implement File Processing JavaScript**

```javascript
class FileDirectoryProcessor {
    constructor(webhookUrl) {
        this.webhookUrl = webhookUrl;
        this.fileDataArray = [];
        this.maxFileSize = 5 * 1024 * 1024; // 5MB limit per file
        this.maxTotalFiles = 50; // Maximum number of files
        
        this.initializeEventListeners();
    }
    
    initializeEventListeners() {
        const fileInput = document.getElementById('fileUploader');
        const confirmButton = document.getElementById('confirmSubmitButton');
        
        fileInput.addEventListener('change', (event) => {
            this.handleFileSelection(event);
        });
        
        confirmButton.addEventListener('click', () => {
            this.processAndSubmitFiles();
        });
    }
    
    async handleFileSelection(event) {
        const files = event.target.files;
        const statusDiv = document.getElementById('fileStatus');
        const confirmButton = document.getElementById('confirmSubmitButton');
        
        // Reset previous data
        this.fileDataArray = [];
        
        // Validation checks
        if (files.length === 0) {
            this.updateStatus('No files selected', 'warning');
            confirmButton.disabled = true;
            return;
        }
        
        if (files.length > this.maxTotalFiles) {
            this.updateStatus(`Too many files selected. Maximum: ${this.maxTotalFiles}`, 'error');
            confirmButton.disabled = true;
            return;
        }
        
        // Process each file
        let validFileCount = 0;
        let totalSize = 0;
        
        for (const file of files) {
            // File type validation
            if (!file.name.toLowerCase().endsWith('.txt')) {
                console.warn(`Skipping non-txt file: ${file.name}`);
                continue;
            }
            
            // File size validation
            if (file.size > this.maxFileSize) {
                console.warn(`Skipping oversized file: ${file.name} (${file.size} bytes)`);
                continue;
            }
            
            totalSize += file.size;
            
            try {
                const content = await this.readFileContent(file);
                this.fileDataArray.push({
                    name: file.name,
                    content: content,
                    size: file.size,
                    lastModified: file.lastModified
                });
                validFileCount++;
            } catch (error) {
                console.error(`Failed to read file ${file.name}:`, error);
            }
        }
        
        // Update UI based on results
        if (validFileCount === 0) {
            this.updateStatus('No valid .txt files found', 'error');
            confirmButton.disabled = true;
        } else {
            this.updateStatus(
                `${validFileCount} files ready (${this.formatFileSize(totalSize)})`, 
                'success'
            );
            confirmButton.disabled = false;
        }
    }
    
    readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (event) => {
                resolve(event.target.result);
            };
            
            reader.onerror = (error) => {
                reject(new Error(`Failed to read file: ${error.message}`));
            };
            
            reader.readAsText(file, 'UTF-8');
        });
    }
    
    async processAndSubmitFiles() {
        if (this.fileDataArray.length === 0) {
            this.updateStatus('No files to process', 'error');
            return;
        }
        
        const confirmButton = document.getElementById('confirmSubmitButton');
        const progressContainer = document.getElementById('uploadProgress');
        
        try {
            // Disable UI during processing
            confirmButton.disabled = true;
            progressContainer.style.display = 'block';
            this.updateProgress(0, 'Preparing files...');
            
            // Construct payload
            const payload = {
                requestType: 'fileDirectoryUpload',
                files: this.fileDataArray,
                metadata: {
                    totalFiles: this.fileDataArray.length,
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent
                }
            };
            
            this.updateProgress(30, 'Sending to server...');
            
            // Send to webhook
            const response = await this.sendToWebhook(payload);
            
            this.updateProgress(100, 'Processing complete!');
            
            // Handle response
            if (response.success) {
                this.updateStatus(`Successfully processed ${this.fileDataArray.length} files`, 'success');
                this.resetInterface();
            } else {
                throw new Error(response.message || 'Server processing failed');
            }
            
        } catch (error) {
            console.error('File processing error:', error);
            this.updateStatus(`Error: ${error.message}`, 'error');
            confirmButton.disabled = false;
        } finally {
            setTimeout(() => {
                progressContainer.style.display = 'none';
            }, 2000);
        }
    }
    
    async sendToWebhook(payload) {
        const response = await fetch(this.webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        return await response.json();
    }
    
    updateStatus(message, type = 'info') {
        const statusDiv = document.getElementById('fileStatus');
        statusDiv.textContent = message;
        statusDiv.className = `status-display ${type}`;
    }
    
    updateProgress(percentage, text) {
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        
        progressFill.style.width = `${percentage}%`;
        progressText.textContent = text;
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    resetInterface() {
        document.getElementById('fileUploader').value = '';
        document.getElementById('confirmSubmitButton').disabled = true;
        this.fileDataArray = [];
        this.updateStatus('No files selected');
    }
}
```

### B3. Integration and Initialization

**CODING AGENT TASK: Initialize the File Processor**

```javascript
// Initialize the file processor when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Replace with your actual n8n webhook URL
    const WEBHOOK_URL = 'https://your-n8n-instance.com/webhook/your-webhook-id';
    
    // Initialize the file processor
    const fileProcessor = new FileDirectoryProcessor(WEBHOOK_URL);
    
    // Optional: Add global error handling
    window.addEventListener('unhandledrejection', function(event) {
        console.error('Unhandled promise rejection:', event.reason);
        fileProcessor.updateStatus('An unexpected error occurred', 'error');
    });
    
    // Optional: Add beforeunload warning if files are selected
    window.addEventListener('beforeunload', function(event) {
        if (fileProcessor.fileDataArray.length > 0) {
            event.preventDefault();
            event.returnValue = 'You have files selected. Are you sure you want to leave?';
            return event.returnValue;
        }
    });
});
```

### B4. CSS Styling Implementation

**CODING AGENT TASK: Add Supporting Styles**

```css
.upload-container {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    border: 2px dashed #ccc;
    border-radius: 8px;
    background-color: #f9f9f9;
}

.status-display {
    padding: 10px;
    margin: 10px 0;
    border-radius: 4px;
    font-weight: bold;
}

.status-display.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.status-display.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.status-display.warning {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
}

.submit-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.submit-button:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
}

.submit-button:hover:not(:disabled) {
    background-color: #0056b3;
}

.progress-container {
    margin-top: 15px;
}

.progress-bar {
    width: 100%;
    height: 20px;
    background-color: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background-color: #28a745;
    transition: width 0.3s ease;
    width: 0%;
}

#progressText {
    display: block;
    text-align: center;
    margin-top: 5px;
    font-size: 14px;
    color: #6c757d;
}
```

---

## Part C: Testing and Validation

### C1. Human Testing Tasks

**HUMAN TASK: Workflow Testing**

1. **Test File Upload Branch**
   - Use browser developer tools to send test payload with `requestType: 'fileDirectoryUpload'`
   - Verify IF node routes to file processing branch
   - Check sub-workflow execution and data passing

2. **Test Chat Branch**
   - Send normal chat requests without `requestType` field
   - Verify IF node routes to existing chat processing
   - Ensure existing functionality remains intact

### C2. Coding Agent Testing Tasks

**CODING AGENT TASK: JavaScript Testing Implementation**

```javascript
// Add these testing functions for development
class FileProcessorTester {
    constructor(processor) {
        this.processor = processor;
    }
    
    // Test file validation
    testFileValidation() {
        console.log('Testing file validation...');
        
        // Test cases for various file scenarios
        const testCases = [
            { name: 'valid.txt', size: 1024, expected: true },
            { name: 'invalid.pdf', size: 1024, expected: false },
            { name: 'toolarge.txt', size: 10 * 1024 * 1024, expected: false }
        ];
        
        testCases.forEach(test => {
            console.log(`Testing ${test.name}: ${test.expected ? 'PASS' : 'FAIL'}`);
        });
    }
    
    // Test payload structure
    testPayloadStructure() {
        const mockPayload = {
            requestType: 'fileDirectoryUpload',
            files: [
                { name: 'test.txt', content: 'test content' }
            ],
            metadata: {
                totalFiles: 1,
                timestamp: new Date().toISOString()
            }
        };
        
        console.log('Mock payload structure:', mockPayload);
        return JSON.stringify(mockPayload, null, 2);
    }
}

// Initialize testing in development mode
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    window.fileProcessorTester = new FileProcessorTester(fileProcessor);
}
```

---

## Part D: Error Handling and Edge Cases

### D1. Common Implementation Pitfalls

**CODING AGENT AWARENESS: Critical Error Prevention**

1. **Memory Management**
   - Large file handling can cause browser memory issues
   - Implement file size limits and chunking for large uploads
   - Clear fileDataArray after successful processing

2. **Asynchronous Operation Handling**
   - FileReader operations are asynchronous
   - Proper Promise handling prevents race conditions
   - Always wrap file operations in try-catch blocks

3. **User Experience Considerations**
   - Disable submit button during processing
   - Provide clear progress indicators
   - Implement proper error messaging

### D2. Security Considerations

**HUMAN TASK: Security Configuration**

1. **n8n Security**
   - Implement proper webhook authentication
   - Add rate limiting to prevent abuse
   - Validate file content server-side

2. **File Processing Security**
   - Sanitize file names before processing
   - Implement virus scanning if possible
   - Limit file types and sizes

---

## Part E: Deployment Checklist

### E1. Human Deployment Tasks

- [ ] Main workflow IF node configured
- [ ] Sub-workflow created and tested
- [ ] Execute Workflow node properly configured
- [ ] Data passing validated between workflows
- [ ] Chat processing branch preserved and functional

### E2. Coding Agent Deployment Tasks

- [ ] JavaScript file processor implemented
- [ ] HTML interface integrated
- [ ] CSS styling applied
- [ ] Error handling implemented
- [ ] Testing functions created (for development)
- [ ] Webhook URL configured correctly
- [ ] File validation logic tested
- [ ] Progress indicators functional

This comprehensive manual provides a complete implementation path for both human configuration and coding agent development tasks, ensuring robust file upload and processing capabilities within the existing n8n webhook infrastructure.